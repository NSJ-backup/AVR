
20150831.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000004  00800200  000001b4  00000228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001b4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000020  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000024  00000000  00000000  0000024c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000023d  00000000  00000000  00000270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000127  00000000  00000000  000004ad  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000001b7  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  0000078c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ab  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000140  00000000  00000000  00000857  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  00000997  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
   c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  10:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  14:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  18:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  1c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  20:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  24:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  28:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  2c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  30:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  34:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  38:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  3c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  40:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  44:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  48:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  4c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  50:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  54:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  58:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  5c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  60:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  64:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  68:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  6c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  70:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  74:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  78:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  7c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  80:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  84:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  88:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  8c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  90:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  94:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  98:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  9c:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  a8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  ac:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  b8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  bc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  c8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  cc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d4:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  d8:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  dc:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>
  e0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e4 eb       	ldi	r30, 0xB4	; 180
  fc:	f1 e0       	ldi	r31, 0x01	; 1
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a4 30       	cpi	r26, 0x04	; 4
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>
 10e:	0e 94 8d 00 	call	0x11a	; 0x11a <main>
 112:	0c 94 d8 00 	jmp	0x1b0	; 0x1b0 <_exit>

00000116 <__bad_interrupt>:
 116:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011a <main>:

int main(void)
{
	int i = 0;			// 출력 펄스 선택
	int cnt = 0;		// 출력 펄스 개수 count
	DDRC = 0x0F;		// PORTC 하위 4비트 출력으로
 11a:	8f e0       	ldi	r24, 0x0F	; 15
 11c:	87 b9       	out	0x07, r24	; 7
 11e:	20 e0       	ldi	r18, 0x00	; 0
 120:	30 e0       	ldi	r19, 0x00	; 0
 122:	40 e0       	ldi	r20, 0x00	; 0
 124:	50 e0       	ldi	r21, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 126:	60 e9       	ldi	r22, 0x90	; 144
 128:	71 e0       	ldi	r23, 0x01	; 1
 12a:	15 c0       	rjmp	.+42     	; 0x156 <main+0x3c>
	
	while(1)
	{
		for(cnt = 0; cnt < 212; cnt++)	// 시계방향 1바퀴 회전
		{
			PORTC = Step[i];
 12c:	f9 01       	movw	r30, r18
 12e:	e0 50       	subi	r30, 0x00	; 0
 130:	fe 4f       	sbci	r31, 0xFE	; 254
 132:	80 81       	ld	r24, Z
 134:	88 b9       	out	0x08, r24	; 8
 136:	84 ef       	ldi	r24, 0xF4	; 244
 138:	91 e0       	ldi	r25, 0x01	; 1
 13a:	fb 01       	movw	r30, r22
 13c:	31 97       	sbiw	r30, 0x01	; 1
 13e:	f1 f7       	brne	.-4      	; 0x13c <main+0x22>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 140:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 142:	d9 f7       	brne	.-10     	; 0x13a <main+0x20>
			_delay_ms(50);

			i++;
 144:	2f 5f       	subi	r18, 0xFF	; 255
 146:	3f 4f       	sbci	r19, 0xFF	; 255
			if(i > 3)
 148:	24 30       	cpi	r18, 0x04	; 4
 14a:	31 05       	cpc	r19, r1
 14c:	14 f0       	brlt	.+4      	; 0x152 <main+0x38>
 14e:	20 e0       	ldi	r18, 0x00	; 0
 150:	30 e0       	ldi	r19, 0x00	; 0
	DDRC = 0x0F;		// PORTC 하위 4비트 출력으로
	
	
	while(1)
	{
		for(cnt = 0; cnt < 212; cnt++)	// 시계방향 1바퀴 회전
 152:	4f 5f       	subi	r20, 0xFF	; 255
 154:	5f 4f       	sbci	r21, 0xFF	; 255
 156:	44 3d       	cpi	r20, 0xD4	; 212
 158:	51 05       	cpc	r21, r1
 15a:	44 f3       	brlt	.-48     	; 0x12c <main+0x12>
 15c:	80 e1       	ldi	r24, 0x10	; 16
 15e:	97 e2       	ldi	r25, 0x27	; 39
 160:	fb 01       	movw	r30, r22
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <main+0x48>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 166:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 168:	d9 f7       	brne	.-10     	; 0x160 <main+0x46>
 16a:	40 e0       	ldi	r20, 0x00	; 0
 16c:	50 e0       	ldi	r21, 0x00	; 0
		}
		_delay_ms(1000);

		for(cnt = 0; cnt < (int)((60/1.7)+0.5); cnt++)	// 반시계방향 60도 회전
		{
			PORTC = Step[i];
 16e:	f9 01       	movw	r30, r18
 170:	e0 50       	subi	r30, 0x00	; 0
 172:	fe 4f       	sbci	r31, 0xFE	; 254
 174:	80 81       	ld	r24, Z
 176:	88 b9       	out	0x08, r24	; 8
 178:	84 ef       	ldi	r24, 0xF4	; 244
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	fb 01       	movw	r30, r22
 17e:	31 97       	sbiw	r30, 0x01	; 1
 180:	f1 f7       	brne	.-4      	; 0x17e <main+0x64>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 182:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 184:	d9 f7       	brne	.-10     	; 0x17c <main+0x62>
			_delay_ms(50);

			i--;
 186:	21 50       	subi	r18, 0x01	; 1
 188:	30 40       	sbci	r19, 0x00	; 0
			if(i < 0)
 18a:	37 ff       	sbrs	r19, 7
 18c:	02 c0       	rjmp	.+4      	; 0x192 <main+0x78>
 18e:	23 e0       	ldi	r18, 0x03	; 3
 190:	30 e0       	ldi	r19, 0x00	; 0
				i = 0;
			}
		}
		_delay_ms(1000);

		for(cnt = 0; cnt < (int)((60/1.7)+0.5); cnt++)	// 반시계방향 60도 회전
 192:	4f 5f       	subi	r20, 0xFF	; 255
 194:	5f 4f       	sbci	r21, 0xFF	; 255
 196:	43 32       	cpi	r20, 0x23	; 35
 198:	51 05       	cpc	r21, r1
 19a:	49 f7       	brne	.-46     	; 0x16e <main+0x54>
 19c:	80 e1       	ldi	r24, 0x10	; 16
 19e:	97 e2       	ldi	r25, 0x27	; 39
 1a0:	fb 01       	movw	r30, r22
 1a2:	31 97       	sbiw	r30, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <main+0x88>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a8:	d9 f7       	brne	.-10     	; 0x1a0 <main+0x86>
 1aa:	40 e0       	ldi	r20, 0x00	; 0
 1ac:	50 e0       	ldi	r21, 0x00	; 0
 1ae:	d3 cf       	rjmp	.-90     	; 0x156 <main+0x3c>

000001b0 <_exit>:
 1b0:	f8 94       	cli

000001b2 <__stop_program>:
 1b2:	ff cf       	rjmp	.-2      	; 0x1b2 <__stop_program>
